/*
 * Copyright 2022 Liju Jayakumar. All Rights Reserved.
 */

/*jshint esversion: 6 */

"use strict";

function parse() {
  // validation
  if (txtInput.value.length === 0) {
    notify("Please provide Input");
    return;
  }

  console.time("Parse");

  // cleanup
  txtInput.value = cleanUp(txtInput.value);
  txtOutput.value = EMPTY;
  txtVirtualOutput.value = EMPTY;

  // prepare
  let patterns = patternList;

  // results
  let result = new Array();
  // extract
  for (let i = 0; i < patterns.length; i++) {
    let pattern = patterns[i].pattern.replace("d{", "\d{");
    console.info("Processing " + pattern);

    const regex = new RegExp(pattern, "gm");

    let pattern_matched;
    while ((pattern_matched = regex.exec(txtInput.value)) !== null) {
      if (pattern_matched.index === regex.lastIndex) {
        regex.lastIndex++;
      }

      console.info("pattern " + pattern + "matched" + pattern_matched.length);
      pattern_matched.forEach((match) => {
        let phone_number = match.replace(/ /g, EMPTY).replace(/-/g, EMPTY);

        if (phone_number.charAt(0) === ZERO) {
          phone_number = phone_number.substring(1);
        }

        if (phone_number.length > 9) {
          result.push(phone_number);

          if (chkReplaceInput.checked) {
            txtInput.value = txtInput.value.replace(match, EMPTY);
          }
        } else {
          console.info(
            "Length Checker : Ignoring " + match + " | " + phone_number
          );
        }
      });
    }
  }

  // show results
  generateResult(result);

  lblResult.innerHTML = setCount(RESULT, txtOutput);
  lblAutogenerated.innerHTML = setCount(AUTO_GENERATED, txtVirtualOutput);

  showHideDownload();

  notify("Done");
  console.timeEnd("Parse");
}

function cleanUp(inputText) {
  cleanupList.forEach( function(item) {
    const pattern =  new RegExp(item.originalText, 'gi')
    inputText = inputText.replace(pattern, item.replaceText);
  });

  return inputText;
}

function generateResult(inputArray) {
  if (!chkAutoGenerate.checked) {
    console.info("Auto Result Generator : Feature turned off");
  }

  if (!chkProvider.checked) {
    console.info("Provider Predictor : Feature turned off");
  }

  // delimiter
  let delimiter = EMPTY;
  if (txtIdentifier.value && txtIdentifier.value.length > 0) {
    delimiter = SPACE + TAB + txtIdentifier.value;
  }
  delimiter += CR_LF;

  // remove duplicates
  const resultSet = new Set(inputArray);

  // console.info("Duplicate Checker : Ignoring " + inputArray.length - resultSet.size + " results");
  console.info(
    "Duplicate Checker : Ignoring " +
      (inputArray.length - resultSet.size) +
      " duplicates"
  );
  let autoGeneratedNumbers = new Array();

  // result generation
  let resultString = EMPTY;
  let autoGenResultString = EMPTY;
  resultSet.forEach((result) => {
    let ignore = false;
    // special case with country code
    if (result.slice(0, 2) == "91") {
      if (inputArray.some((input) => input.startsWith(result.substring(2)))) {
        ignore = true;
        console.info(
          "Duplicate Checker : Ignoring " +
            result +
            " number without country code exists."
        );
      }
    }

    // check if the number of unique chars > 3 for the first 5 numbers
    let unique_chars = new Set(result.slice(0, 5)).size;
    if (unique_chars < 3) {
      console.info(
        "Unique Digits Checker: Ignoring " +
          result +
          " First 5 digit uniques = " +
          unique_chars
      );
      ignore = true;
    }

    if (!ignore) {
      // get provider
      let provider = EMPTY;
      if (chkProvider.checked) {
        provider = getProviderName(result);
      }
      resultString += result + provider + delimiter;

      // Auto generate numbers
      if (chkAutoGenerate.checked) {
        const auto_gen_size = txtAutoGenerateDigits.value;
        const auto_gen_loop = 10 ** auto_gen_size;
        const auto_gen_initial = result.slice(0, -1 * auto_gen_size);
        for (let index = 0; index < auto_gen_loop; index++) {
          const auto_gen_size = txtAutoGenerateDigits.value;
          let auto_gen_result =
            auto_gen_initial + String(index).padStart(auto_gen_size, "0");

          if (auto_gen_result != result) {
            autoGenResultString += auto_gen_result + provider + delimiter;
          }
        }
      }
    }
  });

  txtOutput.value = resultString;
  txtVirtualOutput.value = autoGenResultString;
}

function setCount(title, control) {
  return `${title} (${getLength(control)}) Numbers`;
}

function getLength(element) {
  return element.value.split("\n").length - 1;
}

function handleFileSelect(event) {
  readFile(event.files[0]);
}

function clearAll() {
  txtInput.value = EMPTY;
  txtOutput.value = EMPTY;
  txtVirtualOutput.value = EMPTY;
  fileUploadInput.value = EMPTY;

  lblResult.innerHTML = RESULT;
  lblAutogenerated.innerHTML = AUTO_GENERATED;
  fileUploadInput.value = EMPTY;

  showHideDownload();
}

function showHideDownload() {
  setVisible(btnDownload, txtOutput.value);
  setVisible(btnOutputCopy, txtOutput.value);

  setVisible(btnVirtualOutputDownload, txtVirtualOutput.value);
  setVisible(btnAutoOutputCopy, txtVirtualOutput.value);
}

function setVisible(element, condition) {
  element.style.visibility = condition ? VISIBLE : HIDDEN;
}

function loadConfig() {
  for (let i = 0; i < patternList.length; i++) {
    inputPatterns.add(
      new Option(patternList[i].displayText, patternList[i].pattern)
    );
  }

  chkProvider.checked = resultSettings.predictProviderName;
  chkAutoGenerate.checked = resultSettings.autoGenerateNumbers;
  txtAutoGenerateDigits.value = resultSettings.autoGenerateDigits;
  chkReplaceInput.checked = resultSettings.removeResultsFromInput;

  for (let i = 0; i < cleanupList.length; i++) {
    inputCleanup.add(
      new Option(cleanupList[i].originalText + " = " + cleanupList[i].replaceText)
    );
  }
}

function initialize() {
  console.time("initialize");

  txtInput = document.querySelector("#input-text");
  inputPatterns = document.querySelector("#input-patterns");
  inputCleanup = document.querySelector("#input-cleanup");
  txtOutput = document.querySelector("#output-text");
  txtVirtualOutput = document.querySelector("#auto-output-text");
  fileUploadInput = document.querySelector("#fileInput");

  btnDownload = document.querySelector("#output-download");
  btnVirtualOutputDownload = document.querySelector("#auto-output-download");

  btnOutputCopy = document.querySelector("#output-copy");
  btnAutoOutputCopy = document.querySelector("#auto-output-copy");

  btnParse = document.querySelector("#btnParse");
  btnClear = document.querySelector("#btnClear");
  lblResult = document.querySelector("#lblResult");
  lblAutogenerated = document.querySelector("#lblAutogenerated");

  notification = document.querySelector("#notification");
  notificationText = document.querySelector("#lblNotificationText");

  chkAutoGenerate = document.querySelector("#chkAutoGenerate");
  chkReplaceInput = document.querySelector("#chkReplaceNumber");
  txtIdentifier = document.querySelector("#txtIdentifier");
  chkProvider = document.querySelector("#chkProvider");
  txtAutoGenerateDigits = document.querySelector("#txtAutoGenerateDigits");

  clearAll();
  loadIdentifiers();
  loadConfig();

  console.timeEnd("initialize");
}
